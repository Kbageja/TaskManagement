generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String       @id @default(uuid())
//   name      String
//   email     String    @unique
//   password  String
//   createdAt DateTime  @default(now())
//   groups    GroupMembers[]
//   // Reverse relation for assigned tasks
//   tasks     Tasks[] @relation("assignedUser")
//   // Reverse relation for tasks assigned as a parent
//   assignedTasks Tasks[] @relation("taskParent")
//   partneredTasks Tasks[] @relation("TaskPartners")
//   ownedGroups Group[] @relation("GroupOwner")
//   subUsers    SubUser[] @relation("User_SubUsers")
//   parentUsers SubUser[] @relation("User_Parent")
// }

model SubUser {
  id        Int    @id @default(autoincrement())
  parent    User   @relation("User_Parent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String    
  user      User   @relation("User_SubUsers", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int  
  role      String
  level     Int
  @@unique([parentId, userId, groupId])
}

// model Group {
//   id        Int       @id @default(autoincrement())
//   name      String
//   owner     User      @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
//   ownerId   String
//   createdAt DateTime  @default(now())
//   members   GroupMembers[]
//   tasks     Tasks[]
//   subUsers  SubUser[]
// }

model GroupMembers {
  id      Int   @id @default(autoincrement())
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  role    String
  level   Int
}

model Tasks {
  id        Int       @id @default(autoincrement())

  // The user who is assigned the task
  user      User      @relation("assignedUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  // The parent user who assigned the task
  parent    User      @relation("taskParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  TaskName  String
  Priority  String
  DeadLine  DateTime
  Status    String
  Partners  User[]    @relation("TaskPartners")
  UpdatedAt DateTime  @updatedAt
  CreatedAt DateTime @default(now())
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  createdAt    DateTime     @default(now())
  groups       GroupMembers[]
  tasks        Tasks[]      @relation("assignedUser")
  assignedTasks Tasks[]     @relation("taskParent")
  partneredTasks Tasks[]    @relation("TaskPartners")
  ownedGroups  Group[]      @relation("GroupOwner")
  subUsers     SubUser[]    @relation("User_SubUsers")
  parentUsers  SubUser[]    @relation("User_Parent")
  
  // Reverse relation for invites sent by the user
  invitesSent  Invite[]     @relation("Inviter")
  
  // Reverse relation for invites received by the user
  invitesReceived Invite[]  @relation("Invitee")
}

model Group {
  id         Int        @id @default(autoincrement())
  name       String
  owner      User       @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  createdAt  DateTime   @default(now())
  members    GroupMembers[]
  tasks      Tasks[]
  subUsers   SubUser[]
  
  // Reverse relation for invites related to this group
  invites    Invite[]   @relation("GroupInvites")
}

model Invite {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  group       Group     @relation("GroupInvites", fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int
  inviter     User      @relation("Inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId   String
  invitee     User?     @relation("Invitee", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviteeId   String?
  status      String    // e.g., 'pending', 'accepted', 'expired'
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // Optional: Set expiration time for the invite
  usedAt      DateTime? // Track when the invite was used, if applicable
}



